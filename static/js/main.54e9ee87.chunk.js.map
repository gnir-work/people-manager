{"version":3,"sources":["types/person.ts","consts.ts","api/people.tsx","contexts/PeopleContext.tsx","components/filters/TableTextFilter.tsx","utils/sorters.ts","utils/filters.ts","components/tags/EditableTag.tsx","components/PeopleTable/PersonTag.tsx","components/actions/DeleteButton.tsx","components/PeopleTable/EditableText.tsx","components/tags/AddTag.tsx","components/tags/TagList.tsx","components/PeopleTable/PersonTags.tsx","components/fields/BooleanField.tsx","components/PeopleTable/PeopleTableColumns.tsx","components/PeopleTable/PeopleTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Person","args","id","fullName","personalId","phone","status","team","remarks","preferences","megamut","subjects","availability","wasSegel","this","PERSON_STATUSES","PERSON_PREFERENCES","MEGAMUT","SUBJECTS","AVAILABILITY","STATUS_TO_COLOR","אזרח","חייל","PREFERENCE_TO_COLOR","הרצאות","MEGAMUT_TO_COLOR","מערכות","מקורות","מחקר","AVAILABILITY_TO_COLOR","זמין","getRandomNumberOfItemsFromList","data","slice","_","random","length","PeopleContext","createContext","people","deletePerson","personToDelete","getFieldDataSet","field","updatePerson","newPerson","PeopleContextProvider","children","useState","setPeople","useEffect","range","map","sample","toString","Provider","value","find","person","filteredPeople","filter","fields","uniq","newPeople","TableTextFilter","setSelectedKeys","selectedKeys","confirm","clearFilters","className","ref","instance","focus","placeholder","onChange","e","newKeys","target","onPressEnter","type","onClick","icon","size","sortByField","firstPerson","secondPerson","stringsFilterByField","text","toLowerCase","includes","arrayFilterByField","arrayToAntdMappings","filters","EditableTag","possibleTags","color","onTagChange","onDelete","undefined","editing","setEditing","searchText","setSearchText","filteredTags","possibleTag","toggleEditing","tagProps","onClose","dataSource","onSelect","defaultOpen","onBlur","classNames","clickable","closable","PersonTag","colors","useContext","newTag","message","success","PeopleTableDeleteButton","error","PeopleTableEditableText","initialValue","setValue","autoFocus","event","AddTag","onSubmit","setFilter","tag","newFilter","TagList","tags","additionalPossibleTags","onTagsChange","additionText","isEmpty","key","tagToDelete","oldTag","FilteredTags","handleTagChange","PersonTags","dataSet","newTags","BooleanField","checked","PeopleTableColumns","title","dataIndex","sorter","onFilter","record","filterDropdown","render","width","currentAvailability","preference","megama","subject","String","PeopleTable","columns","pagination","pageSize","Header","Layout","Content","Footer","App","theme","mode","style","lineHeight","Item","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54e9ee87.chunk.js","sourcesContent":["interface PersonArguments {\n  fullName: string;\n  personalId: string;\n  phone: string;\n  status: string;\n  team: string;\n  megamut: string[];\n  subjects: string[];\n  availability: string;\n  wasSegel?: boolean;\n  remarks?: string;\n  preferences?: string[];\n}\n\nexport class Person {\n  readonly id: string;\n  fullName: string;\n  personalId: string;\n  phone: string;\n  status: string;\n  team: string;\n  remarks: string;\n  preferences: string[];\n  megamut: string[];\n  subjects: string[];\n  availability: string;\n  wasSegel: boolean;\n\n  constructor(args: PersonArguments) {\n    this.id = args.personalId;\n    this.fullName = args.fullName;\n    this.personalId = args.personalId;\n    this.phone = args.phone;\n    this.status = args.status;\n    this.team = args.team;\n    this.remarks = args.remarks || \"\";\n    this.preferences = args.preferences || [];\n    this.megamut = args.megamut || [];\n    this.subjects = args.subjects || [];\n    this.availability = args.availability || \"\";\n    this.wasSegel = args.wasSegel || false;\n  }\n}\n","export const PERSON_STATUSES = [\"אזרח\", \"חייל\"];\n\nexport const PERSON_PREFERENCES = [\"בדיקת תרגילים\", \"הרצאות\", \"להישאר לישון\"];\n\nexport const MEGAMUT = [\"מערכות\", \"מחקר\", \"מקורות\"];\n\nexport const SUBJECTS = [\"python\", \"C\", \"ביטים\"];\n\nexport const AVAILABILITY = [\"לא זמין\", \"זמין אבל עמוס\", \"זמין\"];\n\nexport const STATUS_TO_COLOR: {\n  [key: string]: string;\n} = {\n  אזרח: \"blue\",\n  חייל: \"green\"\n};\n\nexport const PREFERENCE_TO_COLOR: {\n  [key: string]: string;\n} = {\n  \"בדיקת תרגילים\": \"magenta\",\n  הרצאות: \"geekblue\",\n  \"להישאר לישון\": \"volcano\"\n};\n\nexport const MEGAMUT_TO_COLOR: {\n  [key: string]: string;\n} = {\n  מערכות: \"green\",\n  מקורות: \"orange\",\n  מחקר: \"purple\"\n};\n\nexport const AVAILABILITY_TO_COLOR = {\n  \"לא זמין\": \"red\",\n  \"זמין אבל עמוס\": \"orange\",\n  זמין: \"green\"\n};\n\n/**\n * Filters for the antd table component that correspond to boolean fields.\n */\nexport const ANTD_BOOLEAN_FILTERS = [\n  {\n    text: \"כן\",\n    value: \"true\"\n  },\n  {\n    text: \"לא\",\n    value: \"false\"\n  }\n];\n\nexport const EDIT_SUCCESS_MESSAGE = \"שדה עודכן בהצלחה.\";\n","import _ from \"lodash\";\n\nimport { Person } from \"../types/person\";\nimport {\n  PERSON_PREFERENCES,\n  PERSON_STATUSES,\n  MEGAMUT,\n  SUBJECTS,\n  AVAILABILITY\n} from \"../consts\";\n\nconst getRandomNumberOfItemsFromList = (data: any[]) =>\n  data.slice(0, _.random(0, data.length));\n\nexport const getPeople = (): Person[] =>\n  _.range(1000).map(\n    id =>\n      new Person({\n        team: \"פיירו\",\n        status: _.sample(PERSON_STATUSES) || PERSON_STATUSES[0],\n        phone: \"053-0000000\",\n        personalId: _.random(10000000, 99999999).toString(),\n        fullName: \"ניר גלר\" + _.random(1, 100).toString(),\n        remarks: \"ששדגדשג\",\n        preferences: getRandomNumberOfItemsFromList(PERSON_PREFERENCES),\n        megamut: getRandomNumberOfItemsFromList(MEGAMUT),\n        subjects: getRandomNumberOfItemsFromList(SUBJECTS),\n        availability: _.sample(AVAILABILITY) || AVAILABILITY[0],\n        wasSegel: _.sample([true, false])\n      })\n  );\n","import React, { createContext, useEffect, useState } from \"react\";\nimport { getPeople } from \"../api/people\";\nimport { Person } from \"../types/person\";\nimport _ from \"lodash\";\n\nconst defaultData: {\n  people: Person[];\n  deletePerson: (personToDelete: Person) => boolean;\n  getFieldDataSet: (field: keyof Person) => any[];\n  updatePerson: (newPerson: Person) => void;\n} = {\n  people: [],\n  deletePerson: (personToDelete: Person) => true,\n  getFieldDataSet: (field: keyof Person) => [],\n  updatePerson: (newPerson: Person) => {}\n};\n\nexport const PeopleContext = createContext(defaultData);\n\n/**\n * A context which handles all of the manipulation on the people dataset.\n * From fetching the data set to deleting or adding people.\n */\nexport const PeopleContextProvider: React.FC = ({ children }) => {\n  const [people, setPeople]: [Person[], Function] = useState([]);\n\n  useEffect(() => {\n    setPeople(getPeople());\n  }, []);\n\n  /**\n   * Deletes a specific person identified by id.\n   *\n   * @param personToDelete The person to delete from the dataset.\n   * @returns a boolean indicating the success of the operation.\n   */\n  const deletePerson = (personToDelete: Person): boolean => {\n    if (people.find(person => person.id === personToDelete.id)) {\n      const filteredPeople = people.filter(\n        person => person.id !== personToDelete.id\n      );\n      setPeople(filteredPeople);\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  /**\n   * Retrieves all of the unique values of a given field.\n   * @param field The field from which the data set should be built\n   */\n  const getFieldDataSet = (field: keyof Person) => {\n    const fields = people.map((person: Person) => person[field]);\n    return _.uniq(fields);\n  };\n\n  /**\n   * Update a specific person.\n   */\n  const updatePerson = (newPerson: Person) => {\n    const newPeople = [\n      ...people.map(person => (person.id === newPerson.id ? newPerson : person))\n    ];\n    setPeople(newPeople);\n  };\n\n  return (\n    <PeopleContext.Provider\n      value={{\n        people,\n        deletePerson,\n        getFieldDataSet,\n        updatePerson\n      }}\n    >\n      {children}\n    </PeopleContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Input, Button } from \"antd\";\n\nimport \"./TableTextFilter.scss\";\n\ninterface TableTextFilterProps {\n  setSelectedKeys: (newFilters: string[]) => void;\n  selectedKeys: string[];\n  confirm: () => void;\n  clearFilters: () => void;\n}\n\nconst TableTextFilter: React.FC<TableTextFilterProps> = ({\n  setSelectedKeys,\n  selectedKeys,\n  confirm,\n  clearFilters\n}) => {\n  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newKeys = e.target.value ? [e.target.value] : [];\n    setSelectedKeys(newKeys);\n  };\n\n  return (\n    <div className=\"table-filter\">\n      <Input\n        ref={(instance: Input) => {\n          if (instance) {\n            instance.focus();\n          }\n        }}\n        placeholder={`הכנס את החיפוש`}\n        value={selectedKeys[0]}\n        onChange={onSearch}\n        className=\"search-input\"\n        onPressEnter={confirm}\n      />\n      <Button\n        type=\"primary\"\n        onClick={confirm}\n        icon=\"search\"\n        size=\"small\"\n        className=\"search-button\"\n      >\n        חפש\n      </Button>\n      <Button onClick={clearFilters} size=\"small\" className=\"clear-button\">\n        נקה חיפוש\n      </Button>\n    </div>\n  );\n};\n\nexport default TableTextFilter;\n","import { Person } from \"../types/person\";\n\n/**\n * Compares between two person objects by a specific field.\n * @param firstPerson\n * @param secondPerson\n * @param field The field name by which the objects should be compared\n */\nexport const sortByField = (\n  firstPerson: Person,\n  secondPerson: Person,\n  field: keyof Person\n): number => {\n  if (firstPerson[field] > secondPerson[field]) {\n    return 1;\n  } else if (firstPerson[field] < secondPerson[field]) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n","import { Person } from \"../types/person\";\nimport { ConditionalProps, getElementType } from \"./types\";\nimport moment, { Moment } from \"moment\";\n\n/**\n * Checks if the person value of the property key contains the given value.\n * Please notice: the check ignores case.\n * @param person The person that should be filtered.\n * @param text The value that should be part of the fields value.\n * @param field The field to check against\n */\nexport const stringsFilterByField = (\n  person: Person,\n  text: string,\n  field: ConditionalProps<Person, string>\n) => person[field].toLowerCase().includes(text.toLowerCase());\n\n/**\n * Checks wether the persons date field is within the range given.\n * Please notice the range is inclusive on both ends (since and until).\n * @param person The person that should be filtered.\n * @param datesRange The dates range by which we will filter\n * @param field The date field that will be filtered.\n */\nexport const datesFilterByField = (\n  person: Person,\n  datesRange: { since: Moment; until: Moment },\n  field: ConditionalProps<Person, moment.Moment>\n) =>\n  datesRange.since.startOf(\"day\") <= person[field] &&\n  person[field] <= datesRange.until.endOf(\"day\");\n\nexport function arrayFilterByField<\n  K extends ConditionalProps<Person, Array<any>>\n>(person: Person, value: getElementType<Person[K]>, field: K) {\n  return (person[field] as any).includes(value);\n}\n\n/**\n * Convert an array of literals to antd filters format.\n * @param filters\n */\nexport const arrayToAntdMappings = (filters: string[]) =>\n  filters.map((value: string) => ({\n    text: value,\n    value\n  }));\n","import React, { useState } from \"react\";\nimport { AutoComplete, Tag } from \"antd\";\nimport { SelectValue } from \"antd/lib/select\";\nimport { TagProps } from \"antd/lib/tag\";\nimport classNames from \"classnames\";\n\ninterface EditableTagProps extends TagProps {\n  possibleTags: string[];\n  color?: string;\n  onTagChange: (newTag: string) => void;\n  onDelete?: () => void;\n}\n\n/**\n * An editable tag with multiple functionalities.\n * In case the tag can be deleted entirely and not only changed please pass a function\n * to handle that case to the onDelete prop.\n *\n * Please notice:\n * In case the tag can be deleted, clicking the tag will prompt the user to change\n * its value while clicking the close icon will delete the tag.\n *\n * In case the tag can't be deleted only clicking the close icon will prompt the user\n * to change the tags value.\n */\nconst EditableTag: React.FC<EditableTagProps> = ({\n  possibleTags,\n  color = \"\",\n  onTagChange,\n  children,\n  onDelete = undefined\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const filteredTags = possibleTags.filter(possibleTag =>\n    possibleTag.includes(searchText)\n  );\n\n  const toggleEditing = () => {\n    setEditing(!editing);\n    setSearchText(\"\");\n  };\n\n  const handleSelection = (value: SelectValue) => {\n    onTagChange(value.toString());\n    toggleEditing();\n  };\n\n  const handleChange = (value: SelectValue) => {\n    setSearchText(value.toString());\n  };\n\n  const tagProps = onDelete\n    ? {\n        onClose: onDelete,\n        onClick: toggleEditing\n      }\n    : {\n        onClose: toggleEditing\n      };\n\n  return editing ? (\n    <AutoComplete\n      onChange={handleChange}\n      dataSource={filteredTags}\n      onSelect={handleSelection}\n      defaultOpen\n      onBlur={toggleEditing}\n      value={searchText}\n    />\n  ) : (\n    <Tag\n      className={classNames({ clickable: onDelete })}\n      color={color}\n      closable\n      {...tagProps}\n    >\n      {children}\n    </Tag>\n  );\n};\n\nexport default EditableTag;\n","import React, { useContext } from \"react\";\nimport EditableTag from \"../tags/EditableTag\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport { Person } from \"../../types/person\";\nimport { ConditionalProps } from \"../../utils/types\";\nimport { message } from \"antd\";\nimport { EDIT_SUCCESS_MESSAGE } from \"../../consts\";\n\nexport interface PersonTag {\n  person: Person;\n  field: ConditionalProps<Person, string>;\n  colors?: {\n    [color: string]: string;\n  };\n  possibleTags: string[];\n}\n\nconst PersonTag: React.FC<PersonTag> = ({\n  person,\n  field,\n  colors = {},\n  possibleTags\n}) => {\n  const { updatePerson } = useContext(PeopleContext);\n\n  const handleTagChange = (newTag: string) => {\n    const newPerson = {\n      ...person,\n      [field]: newTag\n    };\n    updatePerson(newPerson);\n    message.success(EDIT_SUCCESS_MESSAGE);\n  };\n\n  return (\n    <EditableTag\n      onTagChange={handleTagChange}\n      possibleTags={possibleTags}\n      color={colors[person[field]]}\n    >\n      {person[field]}\n    </EditableTag>\n  );\n};\n\nexport default PersonTag;\n","import React, { useContext } from \"react\";\nimport { Icon, message } from \"antd\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport { Person } from \"../../types/person\";\n\nimport \"./DeleteButton.scss\";\n\ninterface PeopleTableDeleteButtonProps {\n  person: Person;\n}\n\n/**\n * A delete button specific for the peoples data table.\n */\nconst PeopleTableDeleteButton: React.FC<PeopleTableDeleteButtonProps> = ({\n  person\n}) => {\n  const { deletePerson } = useContext(PeopleContext);\n\n  /**\n   * Delete the person passed as a props to this component and show a toaster with\n   * the result of the deletion (Success or Failure).\n   */\n  const handleClick = () => {\n    if (deletePerson(person)) {\n      message.success(`${person.fullName} נמחק בהצלחה!`);\n    } else {\n      message.error(`לא ניתן למחוק את ${person.fullName}`);\n    }\n  };\n\n  return <Icon type=\"delete\" onClick={handleClick} />;\n};\n\nexport default PeopleTableDeleteButton;\n","import React, { useContext, useState, KeyboardEvent, ChangeEvent } from \"react\";\nimport { message, Input } from \"antd\";\nimport { Person } from \"../../types/person\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport { ConditionalProps } from \"../../utils/types\";\n\nimport \"./EditableText.scss\";\nimport { EDIT_SUCCESS_MESSAGE } from \"../../consts\";\n\ninterface PeopleTableEditableTextProps {\n  initialValue: string;\n  field: ConditionalProps<Person, string>;\n  person: Person;\n}\n\n/**\n * A delete button specific for the peoples data table.\n */\nconst PeopleTableEditableText: React.FC<PeopleTableEditableTextProps> = ({\n  field,\n  person,\n  initialValue\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState(initialValue);\n  const { updatePerson } = useContext(PeopleContext);\n\n  const toggleEditing = () => {\n    setEditing(!editing);\n  };\n\n  const handleChange = (value: ChangeEvent<HTMLInputElement>) => {\n    setValue(value.target.value);\n  };\n\n  const handleTextChange = (event: KeyboardEvent<HTMLDivElement>) => {\n    updatePerson({ ...person, [field]: value });\n    setEditing(false);\n    message.success(EDIT_SUCCESS_MESSAGE);\n  };\n\n  return editing ? (\n    <Input\n      onClick={toggleEditing}\n      autoFocus\n      onBlur={toggleEditing}\n      value={value}\n      onChange={handleChange}\n      onPressEnter={handleTextChange}\n    />\n  ) : (\n    <span className=\"editable-field clickable\" onClick={toggleEditing}>\n      {initialValue}\n    </span>\n  );\n};\n\nexport default PeopleTableEditableText;\n","import React, { useState, useEffect } from \"react\";\nimport { AutoComplete, Tag, Icon } from \"antd\";\nimport { SelectValue } from \"antd/lib/select\";\n\nimport \"./AddTag.scss\";\n\ninterface AddTagProps {\n  possibleTags: string[];\n  onSubmit: (newTag: string) => void;\n  text: string;\n}\n\nconst AddTag: React.FC<AddTagProps> = ({ possibleTags, onSubmit, text }) => {\n  const [editing, setEditing] = useState(false);\n  const [filter, setFilter] = useState(\"\");\n  const filteredTags = possibleTags.filter(tag => tag.includes(filter));\n\n  /**\n   * We want a fresh filter each time we enter or exit the filtering state.\n   */\n  useEffect(() => {\n    setFilter(\"\");\n  }, [editing]);\n\n  /**\n   * Handle the selection of a value from the auto complete.\n   * @param value\n   */\n  const handleSelection = (value: SelectValue) => {\n    setEditing(false);\n    onSubmit(value.toString());\n  };\n\n  const toggleEditing = () => {\n    setEditing(!editing);\n  };\n\n  const handleChange = (newFilter: SelectValue) => {\n    setFilter(newFilter.toString());\n  };\n\n  return editing ? (\n    <AutoComplete\n      onChange={handleChange}\n      autoFocus\n      defaultOpen\n      dataSource={filteredTags}\n      onSelect={handleSelection}\n      onBlur={toggleEditing}\n    />\n  ) : (\n    <Tag onClick={toggleEditing} className=\"clickable add-tag\">\n      <Icon type=\"plus\" /> {text}\n    </Tag>\n  );\n};\n\nexport default AddTag;\n","import React from \"react\";\nimport AddTag from \"./AddTag\";\n\nimport \"./TagList.scss\";\nimport _ from \"lodash\";\nimport EditableTag from \"./EditableTag\";\n\ninterface TagListProps {\n  tags: string[];\n  additionalPossibleTags: string[];\n  colors?: {\n    [color: string]: string;\n  };\n  additionText: string;\n  onTagsChange: (newTags: string[]) => void;\n}\n\nconst TagList: React.FC<TagListProps> = ({\n  tags,\n  additionalPossibleTags,\n  colors = {},\n  onTagsChange,\n  additionText\n}) => {\n  const handleTagDeletion = (tagToDelete: string) => {\n    onTagsChange(tags.filter(tag => tag !== tagToDelete));\n  };\n\n  const handleTagAddition = (newTag: string) => {\n    onTagsChange([...tags, newTag]);\n  };\n\n  const handleTagChange = (oldTag: string, newTag: string) => {\n    const FilteredTags = tags.filter(tag => tag !== oldTag);\n    onTagsChange([...FilteredTags, newTag]);\n  };\n\n  return (\n    <div className=\"tag-list\">\n      {tags.map(tag => (\n        <EditableTag\n          color={_.isEmpty(colors) ? \"\" : colors[tag]}\n          key={tag}\n          possibleTags={additionalPossibleTags}\n          onDelete={() => handleTagDeletion(tag)}\n          onTagChange={(newTag: string) => handleTagChange(tag, newTag)}\n          closable\n        >\n          {tag}\n        </EditableTag>\n      ))}\n      {additionalPossibleTags.length > 0 && (\n        <AddTag\n          text={additionText}\n          possibleTags={additionalPossibleTags}\n          onSubmit={handleTagAddition}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TagList;\n","import React, { useContext } from \"react\";\nimport { Person } from \"../../types/person\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport TagList from \"../tags/TagList\";\nimport { ConditionalProps } from \"../../utils/types\";\nimport { message } from \"antd\";\nimport { EDIT_SUCCESS_MESSAGE } from \"../../consts\";\n\ninterface PersonPreferenceTagsProps {\n  person: Person;\n  field: ConditionalProps<Person, Array<any>>;\n  possibleTags: string[];\n  colors?: {\n    [color: string]: string;\n  };\n}\n\nconst PersonTags: React.FC<PersonPreferenceTagsProps> = ({\n  person,\n  field,\n  possibleTags,\n  colors = {}\n}) => {\n  const { updatePerson } = useContext(PeopleContext);\n  let dataSet = possibleTags.filter(tag => !person[field].includes(tag));\n\n  /**\n   * Add the new tag to the current person\n   * @param value\n   */\n  const handleTagsChange = (newTags: string[]) => {\n    const newPerson = {\n      ...person,\n      [field]: newTags\n    };\n    updatePerson(newPerson);\n    message.success(EDIT_SUCCESS_MESSAGE);\n  };\n\n  return (\n    <TagList\n      tags={person[field]}\n      colors={colors}\n      additionalPossibleTags={dataSet}\n      onTagsChange={handleTagsChange}\n      additionText=\"הוספת העדפה\"\n    />\n  );\n};\n\nexport default PersonTags;\n","import React, { useContext } from \"react\";\nimport { Person } from \"../../types/person\";\nimport { ConditionalProps } from \"../../utils/types\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport { message, Checkbox } from \"antd\";\nimport { EDIT_SUCCESS_MESSAGE } from \"../../consts\";\n\ninterface BooleanFieldProps {\n  person: Person;\n  field: ConditionalProps<Person, boolean>;\n}\n\nconst BooleanField: React.FC<BooleanFieldProps> = ({ person, field }) => {\n  const { updatePerson } = useContext(PeopleContext);\n\n  const handleClick = () => {\n    const newPerson = {\n      ...person,\n      [field]: !person[field]\n    };\n    updatePerson(newPerson);\n    message.success(EDIT_SUCCESS_MESSAGE);\n  };\n\n  return (\n    <Checkbox\n      checked={person[field]}\n      className=\"clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default BooleanField;\n","import React from \"react\";\n\nimport TableTextFilter from \"../filters/TableTextFilter\";\nimport { sortByField } from \"../../utils/sorters\";\nimport {\n  stringsFilterByField,\n  arrayToAntdMappings,\n  arrayFilterByField\n} from \"../../utils/filters\";\nimport { Person } from \"../../types/person\";\nimport PersonTag from \"./PersonTag\";\nimport PeopleTableDeleteButton from \"../actions/DeleteButton\";\nimport PeopleTableEditableText from \"./EditableText\";\nimport PersonTags from \"./PersonTags\";\nimport {\n  PERSON_STATUSES,\n  PERSON_PREFERENCES,\n  MEGAMUT,\n  PREFERENCE_TO_COLOR,\n  MEGAMUT_TO_COLOR,\n  SUBJECTS,\n  STATUS_TO_COLOR,\n  AVAILABILITY_TO_COLOR,\n  AVAILABILITY,\n  ANTD_BOOLEAN_FILTERS\n} from \"../../consts\";\nimport BooleanField from \"../fields/BooleanField\";\n\nexport const PeopleTableColumns = [\n  {\n    title: \"שם מלא\",\n    dataIndex: \"fullName\",\n    key: \"fullName\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"fullName\"),\n    onFilter: (value: string, record: Person) =>\n      stringsFilterByField(record, value, \"fullName\"),\n    filterDropdown: TableTextFilter,\n    render: (value: string, record: Person) => (\n      <PeopleTableEditableText\n        field=\"fullName\"\n        person={record}\n        initialValue={value}\n      />\n    ),\n    width: \"15em\"\n  },\n  {\n    title: \"מ.א\",\n    dataIndex: \"personalId\",\n    key: \"personalId\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"personalId\"),\n    onFilter: (value: string, record: Person) =>\n      stringsFilterByField(record, value, \"personalId\"),\n    filterDropdown: TableTextFilter,\n    render: (value: string, record: Person) => (\n      <PeopleTableEditableText\n        field=\"personalId\"\n        person={record}\n        initialValue={value}\n      />\n    ),\n    width: \"15em\"\n  },\n  {\n    title: \"פלאפון\",\n    dataIndex: \"phone\",\n    key: \"phone\",\n    render: (value: string, record: Person) => (\n      <PeopleTableEditableText\n        field=\"phone\"\n        person={record}\n        initialValue={value}\n      />\n    ),\n    width: \"12em\"\n  },\n  {\n    title: \"מצב שירות\",\n    dataIndex: \"status\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"status\"),\n    key: \"status\",\n    render: (status: string, record: Person) => (\n      <PersonTag\n        field=\"status\"\n        possibleTags={PERSON_STATUSES}\n        colors={STATUS_TO_COLOR}\n        person={record}\n      />\n    ),\n    filters: arrayToAntdMappings(PERSON_STATUSES),\n    onFilter: (status: string, record: Person) => record.status === status\n  },\n  {\n    title: \"זמינות\",\n    dataIndex: \"availability\",\n    key: \"availability\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"availability\"),\n    render: (currentAvailability: string, record: Person) => (\n      <PersonTag\n        field=\"availability\"\n        possibleTags={AVAILABILITY}\n        colors={AVAILABILITY_TO_COLOR}\n        person={record}\n      />\n    ),\n    filters: arrayToAntdMappings(AVAILABILITY),\n    onFilter: (availability: string, record: Person) =>\n      record.availability === availability\n  },\n  {\n    title: \"צוות\",\n    dataIndex: \"team\",\n    key: \"team\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"team\"),\n    onFilter: (value: string, record: Person) =>\n      stringsFilterByField(record, value, \"team\"),\n    filterDropdown: TableTextFilter,\n    render: (value: string, record: Person) => (\n      <PeopleTableEditableText\n        field=\"team\"\n        person={record}\n        initialValue={value}\n      />\n    ),\n    width: \"12em\"\n  },\n  {\n    title: \"העדפות\",\n    dataIndex: \"preferences\",\n    key: \"preferences\",\n    render: (data: string[], record: Person) => (\n      <PersonTags\n        field=\"preferences\"\n        possibleTags={PERSON_PREFERENCES}\n        person={record}\n        colors={PREFERENCE_TO_COLOR}\n      />\n    ),\n    filters: arrayToAntdMappings(PERSON_PREFERENCES),\n    onFilter: (preference: string, record: Person) =>\n      arrayFilterByField(record, preference, \"preferences\")\n  },\n  {\n    title: \"מגמות רלוונטיות\",\n    dataIndex: \"megamut\",\n    key: \"megamut\",\n    render: (data: string[], record: Person) => (\n      <PersonTags\n        colors={MEGAMUT_TO_COLOR}\n        field=\"megamut\"\n        possibleTags={MEGAMUT}\n        person={record}\n      />\n    ),\n    filters: arrayToAntdMappings(MEGAMUT),\n    onFilter: (megama: string, record: Person) =>\n      arrayFilterByField(record, megama, \"megamut\")\n  },\n  {\n    title: \"מערכים רלוונטיים\",\n    dataIndex: \"subjects\",\n    key: \"subjects\",\n    render: (data: string[], record: Person) => (\n      <PersonTags field=\"subjects\" possibleTags={SUBJECTS} person={record} />\n    ),\n    filters: arrayToAntdMappings(SUBJECTS),\n    onFilter: (subject: string, record: Person) =>\n      arrayFilterByField(record, subject, \"subjects\")\n  },\n  {\n    title: \"סגל עבר\",\n    dataIndex: \"wasSegel\",\n    key: \"wasSegel\",\n    sorter: (firstPerson: Person, secondPerson: Person) =>\n      sortByField(firstPerson, secondPerson, \"wasSegel\"),\n    render: (wasSegel: string, record: Person) => (\n      <BooleanField field=\"wasSegel\" person={record} />\n    ),\n    filters: ANTD_BOOLEAN_FILTERS,\n    onFilter: (wasSegel: string, record: Person) =>\n      String(record.wasSegel) === wasSegel\n  },\n  {\n    title: \"הערות נוספות\",\n    dataIndex: \"remarks\",\n    key: \"remarks\",\n    width: \"30em\",\n    onFilter: (value: string, record: Person) =>\n      stringsFilterByField(record, value, \"remarks\"),\n    filterDropdown: TableTextFilter,\n    render: (value: string, record: Person) => (\n      <PeopleTableEditableText\n        field=\"remarks\"\n        person={record}\n        initialValue={value}\n      />\n    )\n  },\n  {\n    title: \"\",\n    dataIndex: \"\",\n    key: \"actions\",\n    render: (text: string, record: Person) => (\n      <PeopleTableDeleteButton person={record} />\n    )\n  }\n];\n","import React, { useContext } from \"react\";\nimport classNames from \"classnames\";\nimport { Table } from \"antd\";\n\nimport { PeopleTableColumns } from \"./PeopleTableColumns\";\nimport { Person } from \"../../types/person\";\nimport { PeopleContext } from \"../../contexts/PeopleContext\";\nimport \"./PeopleTable.scss\";\n\ninterface PeopleTableProps {\n  className?: String;\n}\n\nconst PeopleTable: React.FC<PeopleTableProps> = ({ className }) => {\n  const { people }: { people: Person[] } = useContext(PeopleContext);\n  const data = people.map(person => ({ ...person, key: person.id }));\n  return (\n    <div className={classNames(className, \"people-table-container\")}>\n      <Table\n        dataSource={data}\n        columns={PeopleTableColumns}\n        size=\"middle\"\n        pagination={{ pageSize: 30 }}\n      />\n    </div>\n  );\n};\n\nexport default PeopleTable;\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { PeopleContextProvider } from \"./contexts/PeopleContext\";\nimport PeopleTable from \"./components/PeopleTable/PeopleTable\";\n\nimport \"antd/dist/antd.css\";\nimport \"./rtl.scss\";\nimport \"./App.scss\";\n\nconst { Header, Content, Footer } = Layout;\n\nconst App: React.FC = () => {\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" style={{ lineHeight: \"64px\" }}>\n          <Menu.Item> מנהל אנשי חוץ </Menu.Item>\n        </Menu>\n      </Header>\n      <Content>\n        <PeopleContextProvider>\n          <PeopleTable className=\"people-manager-table\" />\n        </PeopleContextProvider>\n      </Content>\n      <Footer>Bis Hibur ©2019 Created by Nir Geller</Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}